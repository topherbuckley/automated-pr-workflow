#!/bin/bash

# Default values
ORIGIN="origin"
UPSTREAM="upstream"
DEFAULT_PR_BODY="Default PR Body; not directly specified"
DEFAULT_PR_TITLE="$(git log -1 --pretty=%B)"

# Function to display usage instructions
usage() {
  echo "Usage: $0 [--pr-title PR_TITLE] [--branch-name BRANCH_NAME] [--pr-body PR_BODY] [--origin ORIGIN_REMOTE] [--upstream UPSTREAM_REMOTE]"
  echo "  --pr-title PR_TITLE   : The title for the pull request (optional, defaults to the latest commit message)"
  echo "  --branch-name BRANCH_NAME : The name of the branch (optional, defaults to current branch)"
  echo "  --pr-body PR_BODY      : The body of the pull request (optional, defaults to 'Default PR Body; not directly specified')"
  echo "  --origin ORIGIN         : The name of the remote for pushing changes (optional, defaults to 'origin')"
  echo "  --upstream UPSTREAM     : The name of the remote for creating pull requests (optional, defaults to 'upstream')"
  exit 1
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --origin)
      ORIGIN="$2"
      shift 2
      ;;
    --upstream)
      UPSTREAM="$2"
      shift 2
      ;;
    --branch-name)
      BRANCH_NAME="$2"
      shift 2
      ;;
    --pr-body)
      PR_BODY="$2"
      shift 2
      ;;
    --pr-title)
      PR_TITLE="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      usage
      ;;
  esac
done

# Get the current branch name
DEFAULT_BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_NAME=${BRANCH_NAME:-$DEFAULT_BRANCH_NAME}

# Check if BRANCH_NAME is "main" or "master"
if [ "$BRANCH_NAME" == "main" ] || [ "$BRANCH_NAME" == "master" ]; then
  echo "Error: Branch name cannot be 'main' or 'master'. Please provide a different branch name."
  exit 1
fi

# Use the most recent commit message at HEAD as the default PR_TITLE
PR_TITLE=${PR_TITLE:-$DEFAULT_PR_TITLE}

# Use the default PR_BODY if not provided
PR_BODY=${PR_BODY:-$DEFAULT_PR_BODY}

# Print debugging information
echo "ORIGIN: $ORIGIN"
echo "UPSTREAM: $UPSTREAM"
echo "BRANCH_NAME: $BRANCH_NAME"
echo "PR_TITLE: $PR_TITLE"
echo "PR_BODY: $PR_BODY"

# Push your changes to your fork (origin)
git push --set-upstream $ORIGIN $BRANCH_NAME

# Create a pull request against the upstream repository
if [ -n "$PR_TITLE" ] || [ -n "$PR_BODY" ]; then
  PR_URL=$(gh pr create --title "$PR_TITLE" --body "$PR_BODY" --head $BRANCH_NAME | grep -oP '(?<=pulls\/)\d+')
else
  PR_URL=$(gh pr create --head $BRANCH_NAME --fill-verbose | grep -oP '(?<=pulls\/)\d+')
fi

# Merge the pull request (against the upstream repository)
if gh pr merge $PR_URL --merge; then
  echo "Pull request successfully merged."
else
  PR_LINK=$(gh pr view $PR_URL --json url -q '.url' | tr -d '"')
  echo "Pull request failed. There are likely merge conflicts. Please resolve them at:"
  echo "$PR_LINK"
  exit 1
fi

# Pull changes into the main branch (from upstream)
MAIN_BRANCH=$(git remote show $UPSTREAM | awk '/HEAD branch/ {print $NF}')
git checkout $MAIN_BRANCH
git pull $UPSTREAM $MAIN_BRANCH

# Confirm and delete the remote branch (from your fork)
confirm_deletion() {
  while true; do
    read -p "Do you wish to delete the $1 branch '$2'? [y/n] " yn
    case $yn in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

if confirm_deletion "remote" "$BRANCH_NAME"; then
  git push $ORIGIN --delete $BRANCH_NAME
  echo "Remote branch '$BRANCH_NAME' deleted."
else
  echo "Remote branch '$BRANCH_NAME' not deleted."
fi

# Confirm and delete the local branch
if confirm_deletion "local" "$BRANCH_NAME"; then
  git branch -d $BRANCH_NAME
  echo "Local branch '$BRANCH_NAME' deleted."
else
  echo "Local branch '$BRANCH_NAME' not deleted."
fi
